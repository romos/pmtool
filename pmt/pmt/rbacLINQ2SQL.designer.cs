#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pmt
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="rbac")]
	public partial class rbacLINQ2SQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertActiveRole(ActiveRole instance);
    partial void UpdateActiveRole(ActiveRole instance);
    partial void DeleteActiveRole(ActiveRole instance);
    partial void InsertAuthUserRole(AuthUserRole instance);
    partial void UpdateAuthUserRole(AuthUserRole instance);
    partial void DeleteAuthUserRole(AuthUserRole instance);
    partial void InsertDynamicSOD(DynamicSOD instance);
    partial void UpdateDynamicSOD(DynamicSOD instance);
    partial void DeleteDynamicSOD(DynamicSOD instance);
    partial void InsertObject(Object instance);
    partial void UpdateObject(Object instance);
    partial void DeleteObject(Object instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermissionPerObject(PermissionPerObject instance);
    partial void UpdatePermissionPerObject(PermissionPerObject instance);
    partial void DeletePermissionPerObject(PermissionPerObject instance);
    partial void InsertPolicy(Policy instance);
    partial void UpdatePolicy(Policy instance);
    partial void DeletePolicy(Policy instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoleHierarchy(RoleHierarchy instance);
    partial void UpdateRoleHierarchy(RoleHierarchy instance);
    partial void DeleteRoleHierarchy(RoleHierarchy instance);
    partial void InsertRolePermission(RolePermission instance);
    partial void UpdateRolePermission(RolePermission instance);
    partial void DeleteRolePermission(RolePermission instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertStaticSOD(StaticSOD instance);
    partial void UpdateStaticSOD(StaticSOD instance);
    partial void DeleteStaticSOD(StaticSOD instance);
    #endregion
		
		public rbacLINQ2SQLDataContext() : 
				base(global::pmt.Properties.Settings.Default.rbacConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public rbacLINQ2SQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rbacLINQ2SQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rbacLINQ2SQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rbacLINQ2SQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Action> Action
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ActiveRole> ActiveRole
		{
			get
			{
				return this.GetTable<ActiveRole>();
			}
		}
		
		public System.Data.Linq.Table<AuthUserRole> AuthUserRole
		{
			get
			{
				return this.GetTable<AuthUserRole>();
			}
		}
		
		public System.Data.Linq.Table<DynamicSOD> DynamicSOD
		{
			get
			{
				return this.GetTable<DynamicSOD>();
			}
		}
		
		public System.Data.Linq.Table<Object> Object
		{
			get
			{
				return this.GetTable<Object>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permission
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionPerObject> PermissionPerObject
		{
			get
			{
				return this.GetTable<PermissionPerObject>();
			}
		}
		
		public System.Data.Linq.Table<Policy> Policy
		{
			get
			{
				return this.GetTable<Policy>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RoleHierarchy> RoleHierarchy
		{
			get
			{
				return this.GetTable<RoleHierarchy>();
			}
		}
		
		public System.Data.Linq.Table<RolePermission> RolePermission
		{
			get
			{
				return this.GetTable<RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<Session> Session
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<StaticSOD> StaticSOD
		{
			get
			{
				return this.GetTable<StaticSOD>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Action")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<PermissionPerObject> _PermissionPerObject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Action()
		{
			this._PermissionPerObject = new EntitySet<PermissionPerObject>(new Action<PermissionPerObject>(this.attach_PermissionPerObject), new Action<PermissionPerObject>(this.detach_PermissionPerObject));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_PermissionPerObject", Storage="_PermissionPerObject", ThisKey="Id", OtherKey="Action_Id")]
		public EntitySet<PermissionPerObject> PermissionPerObject
		{
			get
			{
				return this._PermissionPerObject;
			}
			set
			{
				this._PermissionPerObject.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionPerObject(PermissionPerObject entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_PermissionPerObject(PermissionPerObject entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Password;
		
		private int _Policy_Id;
		
		private EntitySet<AuthUserRole> _AuthUserRole;
		
		private EntitySet<Session> _Session;
		
		private EntityRef<Policy> _Policy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPolicy_IdChanging(int value);
    partial void OnPolicy_IdChanged();
    #endregion
		
		public User()
		{
			this._AuthUserRole = new EntitySet<AuthUserRole>(new Action<AuthUserRole>(this.attach_AuthUserRole), new Action<AuthUserRole>(this.detach_AuthUserRole));
			this._Session = new EntitySet<Session>(new Action<Session>(this.attach_Session), new Action<Session>(this.detach_Session));
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Policy_Id", DbType="Int NOT NULL")]
		public int Policy_Id
		{
			get
			{
				return this._Policy_Id;
			}
			set
			{
				if ((this._Policy_Id != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicy_IdChanging(value);
					this.SendPropertyChanging();
					this._Policy_Id = value;
					this.SendPropertyChanged("Policy_Id");
					this.OnPolicy_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AuthUserRole", Storage="_AuthUserRole", ThisKey="Id", OtherKey="User_Id")]
		public EntitySet<AuthUserRole> AuthUserRole
		{
			get
			{
				return this._AuthUserRole;
			}
			set
			{
				this._AuthUserRole.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Session", Storage="_Session", ThisKey="Id", OtherKey="User_Id")]
		public EntitySet<Session> Session
		{
			get
			{
				return this._Session;
			}
			set
			{
				this._Session.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_User", Storage="_Policy", ThisKey="Policy_Id", OtherKey="Id", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.User.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._Policy_Id = value.Id;
					}
					else
					{
						this._Policy_Id = default(int);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthUserRole(AuthUserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AuthUserRole(AuthUserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Session(Session entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Session(Session entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActiveRole")]
	public partial class ActiveRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Session_Id;
		
		private int _Role_Id;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Session> _Session;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSession_IdChanging(int value);
    partial void OnSession_IdChanged();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    #endregion
		
		public ActiveRole()
		{
			this._Role = default(EntityRef<Role>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Session_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Session_Id
		{
			get
			{
				return this._Session_Id;
			}
			set
			{
				if ((this._Session_Id != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSession_IdChanging(value);
					this.SendPropertyChanging();
					this._Session_Id = value;
					this.SendPropertyChanged("Session_Id");
					this.OnSession_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_ActiveRole", Storage="_Role", ThisKey="Role_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.ActiveRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.ActiveRole.Add(this);
						this._Role_Id = value.Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_ActiveRole", Storage="_Session", ThisKey="Session_Id", OtherKey="Id", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.ActiveRole.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.ActiveRole.Add(this);
						this._Session_Id = value.Id;
					}
					else
					{
						this._Session_Id = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthUserRole")]
	public partial class AuthUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private int _Role_Id;
		
		private EntityRef<User> _User;
		
		private EntityRef<Role> _Role;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    #endregion
		
		public AuthUserRole()
		{
			this._User = default(EntityRef<User>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AuthUserRole", Storage="_User", ThisKey="User_Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AuthUserRole.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AuthUserRole.Add(this);
						this._User_Id = value.Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_AuthUserRole", Storage="_Role", ThisKey="Role_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.AuthUserRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.AuthUserRole.Add(this);
						this._Role_Id = value.Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DynamicSOD")]
	public partial class DynamicSOD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_Id;
		
		private int _ExclusiveRole_Id;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Role> _Role1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    partial void OnExclusiveRole_IdChanging(int value);
    partial void OnExclusiveRole_IdChanged();
    #endregion
		
		public DynamicSOD()
		{
			this._Role = default(EntityRef<Role>);
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExclusiveRole_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExclusiveRole_Id
		{
			get
			{
				return this._ExclusiveRole_Id;
			}
			set
			{
				if ((this._ExclusiveRole_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExclusiveRole_IdChanging(value);
					this.SendPropertyChanging();
					this._ExclusiveRole_Id = value;
					this.SendPropertyChanged("ExclusiveRole_Id");
					this.OnExclusiveRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_DynamicSOD", Storage="_Role", ThisKey="ExclusiveRole_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.DynamicSOD.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.DynamicSOD.Add(this);
						this._ExclusiveRole_Id = value.Id;
					}
					else
					{
						this._ExclusiveRole_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_DynamicSOD1", Storage="_Role1", ThisKey="Role_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.DynamicSOD1.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.DynamicSOD1.Add(this);
						this._Role_Id = value.Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Object")]
	public partial class Object : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<PermissionPerObject> _PermissionPerObject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Object()
		{
			this._PermissionPerObject = new EntitySet<PermissionPerObject>(new Action<PermissionPerObject>(this.attach_PermissionPerObject), new Action<PermissionPerObject>(this.detach_PermissionPerObject));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_PermissionPerObject", Storage="_PermissionPerObject", ThisKey="Id", OtherKey="Object_Id")]
		public EntitySet<PermissionPerObject> PermissionPerObject
		{
			get
			{
				return this._PermissionPerObject;
			}
			set
			{
				this._PermissionPerObject.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionPerObject(PermissionPerObject entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_PermissionPerObject(PermissionPerObject entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Policy_Id;
		
		private EntitySet<PermissionPerObject> _PermissionPerObject;
		
		private EntitySet<RolePermission> _RolePermission;
		
		private EntityRef<Policy> _Policy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPolicy_IdChanging(int value);
    partial void OnPolicy_IdChanged();
    #endregion
		
		public Permission()
		{
			this._PermissionPerObject = new EntitySet<PermissionPerObject>(new Action<PermissionPerObject>(this.attach_PermissionPerObject), new Action<PermissionPerObject>(this.detach_PermissionPerObject));
			this._RolePermission = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermission), new Action<RolePermission>(this.detach_RolePermission));
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Policy_Id", DbType="Int NOT NULL")]
		public int Policy_Id
		{
			get
			{
				return this._Policy_Id;
			}
			set
			{
				if ((this._Policy_Id != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicy_IdChanging(value);
					this.SendPropertyChanging();
					this._Policy_Id = value;
					this.SendPropertyChanged("Policy_Id");
					this.OnPolicy_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionPerObject", Storage="_PermissionPerObject", ThisKey="Id", OtherKey="Permission_Id")]
		public EntitySet<PermissionPerObject> PermissionPerObject
		{
			get
			{
				return this._PermissionPerObject;
			}
			set
			{
				this._PermissionPerObject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_RolePermission", ThisKey="Id", OtherKey="Permission_Id")]
		public EntitySet<RolePermission> RolePermission
		{
			get
			{
				return this._RolePermission;
			}
			set
			{
				this._RolePermission.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Permission", Storage="_Policy", ThisKey="Policy_Id", OtherKey="Id", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.Permission.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.Permission.Add(this);
						this._Policy_Id = value.Id;
					}
					else
					{
						this._Policy_Id = default(int);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionPerObject(PermissionPerObject entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_PermissionPerObject(PermissionPerObject entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_RolePermission(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_RolePermission(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionPerObject")]
	public partial class PermissionPerObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Object_Id;
		
		private int _Action_Id;
		
		private int _Permission_Id;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Object> _Object;
		
		private EntityRef<Permission> _Permission;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObject_IdChanging(int value);
    partial void OnObject_IdChanged();
    partial void OnAction_IdChanging(int value);
    partial void OnAction_IdChanged();
    partial void OnPermission_IdChanging(int value);
    partial void OnPermission_IdChanged();
    #endregion
		
		public PermissionPerObject()
		{
			this._Action = default(EntityRef<Action>);
			this._Object = default(EntityRef<Object>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Object_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Object_Id
		{
			get
			{
				return this._Object_Id;
			}
			set
			{
				if ((this._Object_Id != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObject_IdChanging(value);
					this.SendPropertyChanging();
					this._Object_Id = value;
					this.SendPropertyChanged("Object_Id");
					this.OnObject_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Action_Id
		{
			get
			{
				return this._Action_Id;
			}
			set
			{
				if ((this._Action_Id != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAction_IdChanging(value);
					this.SendPropertyChanging();
					this._Action_Id = value;
					this.SendPropertyChanged("Action_Id");
					this.OnAction_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Permission_Id
		{
			get
			{
				return this._Permission_Id;
			}
			set
			{
				if ((this._Permission_Id != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermission_IdChanging(value);
					this.SendPropertyChanging();
					this._Permission_Id = value;
					this.SendPropertyChanged("Permission_Id");
					this.OnPermission_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_PermissionPerObject", Storage="_Action", ThisKey="Action_Id", OtherKey="Id", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.PermissionPerObject.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.PermissionPerObject.Add(this);
						this._Action_Id = value.Id;
					}
					else
					{
						this._Action_Id = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_PermissionPerObject", Storage="_Object", ThisKey="Object_Id", OtherKey="Id", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.PermissionPerObject.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.PermissionPerObject.Add(this);
						this._Object_Id = value.Id;
					}
					else
					{
						this._Object_Id = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionPerObject", Storage="_Permission", ThisKey="Permission_Id", OtherKey="Id", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.PermissionPerObject.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.PermissionPerObject.Add(this);
						this._Permission_Id = value.Id;
					}
					else
					{
						this._Permission_Id = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Policy")]
	public partial class Policy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<User> _User;
		
		private EntitySet<Permission> _Permission;
		
		private EntitySet<Role> _Role;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Policy()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			this._Permission = new EntitySet<Permission>(new Action<Permission>(this.attach_Permission), new Action<Permission>(this.detach_Permission));
			this._Role = new EntitySet<Role>(new Action<Role>(this.attach_Role), new Action<Role>(this.detach_Role));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_User", Storage="_User", ThisKey="Id", OtherKey="Policy_Id")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Permission", Storage="_Permission", ThisKey="Id", OtherKey="Policy_Id")]
		public EntitySet<Permission> Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				this._Permission.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Role", Storage="_Role", ThisKey="Id", OtherKey="Policy_Id")]
		public EntitySet<Role> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				this._Role.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
		
		private void attach_Permission(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_Permission(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
		
		private void attach_Role(Role entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_Role(Role entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Cardinality;
		
		private int _Policy_Id;
		
		private EntitySet<ActiveRole> _ActiveRole;
		
		private EntitySet<AuthUserRole> _AuthUserRole;
		
		private EntitySet<DynamicSOD> _DynamicSOD;
		
		private EntitySet<DynamicSOD> _DynamicSOD1;
		
		private EntitySet<RoleHierarchy> _RoleHierarchy;
		
		private EntitySet<RoleHierarchy> _RoleHierarchy1;
		
		private EntitySet<RolePermission> _RolePermission;
		
		private EntitySet<StaticSOD> _StaticSOD;
		
		private EntitySet<StaticSOD> _StaticSOD1;
		
		private EntityRef<Policy> _Policy;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCardinalityChanging(System.Nullable<int> value);
    partial void OnCardinalityChanged();
    partial void OnPolicy_IdChanging(int value);
    partial void OnPolicy_IdChanged();
    #endregion
		
		public Role()
		{
			this._ActiveRole = new EntitySet<ActiveRole>(new Action<ActiveRole>(this.attach_ActiveRole), new Action<ActiveRole>(this.detach_ActiveRole));
			this._AuthUserRole = new EntitySet<AuthUserRole>(new Action<AuthUserRole>(this.attach_AuthUserRole), new Action<AuthUserRole>(this.detach_AuthUserRole));
			this._DynamicSOD = new EntitySet<DynamicSOD>(new Action<DynamicSOD>(this.attach_DynamicSOD), new Action<DynamicSOD>(this.detach_DynamicSOD));
			this._DynamicSOD1 = new EntitySet<DynamicSOD>(new Action<DynamicSOD>(this.attach_DynamicSOD1), new Action<DynamicSOD>(this.detach_DynamicSOD1));
			this._RoleHierarchy = new EntitySet<RoleHierarchy>(new Action<RoleHierarchy>(this.attach_RoleHierarchy), new Action<RoleHierarchy>(this.detach_RoleHierarchy));
			this._RoleHierarchy1 = new EntitySet<RoleHierarchy>(new Action<RoleHierarchy>(this.attach_RoleHierarchy1), new Action<RoleHierarchy>(this.detach_RoleHierarchy1));
			this._RolePermission = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermission), new Action<RolePermission>(this.detach_RolePermission));
			this._StaticSOD = new EntitySet<StaticSOD>(new Action<StaticSOD>(this.attach_StaticSOD), new Action<StaticSOD>(this.detach_StaticSOD));
			this._StaticSOD1 = new EntitySet<StaticSOD>(new Action<StaticSOD>(this.attach_StaticSOD1), new Action<StaticSOD>(this.detach_StaticSOD1));
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cardinality", DbType="Int")]
		public System.Nullable<int> Cardinality
		{
			get
			{
				return this._Cardinality;
			}
			set
			{
				if ((this._Cardinality != value))
				{
					this.OnCardinalityChanging(value);
					this.SendPropertyChanging();
					this._Cardinality = value;
					this.SendPropertyChanged("Cardinality");
					this.OnCardinalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Policy_Id", DbType="Int NOT NULL")]
		public int Policy_Id
		{
			get
			{
				return this._Policy_Id;
			}
			set
			{
				if ((this._Policy_Id != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicy_IdChanging(value);
					this.SendPropertyChanging();
					this._Policy_Id = value;
					this.SendPropertyChanged("Policy_Id");
					this.OnPolicy_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_ActiveRole", Storage="_ActiveRole", ThisKey="Id", OtherKey="Role_Id")]
		public EntitySet<ActiveRole> ActiveRole
		{
			get
			{
				return this._ActiveRole;
			}
			set
			{
				this._ActiveRole.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_AuthUserRole", Storage="_AuthUserRole", ThisKey="Id", OtherKey="Role_Id")]
		public EntitySet<AuthUserRole> AuthUserRole
		{
			get
			{
				return this._AuthUserRole;
			}
			set
			{
				this._AuthUserRole.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_DynamicSOD", Storage="_DynamicSOD", ThisKey="Id", OtherKey="ExclusiveRole_Id")]
		public EntitySet<DynamicSOD> DynamicSOD
		{
			get
			{
				return this._DynamicSOD;
			}
			set
			{
				this._DynamicSOD.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_DynamicSOD1", Storage="_DynamicSOD1", ThisKey="Id", OtherKey="Role_Id")]
		public EntitySet<DynamicSOD> DynamicSOD1
		{
			get
			{
				return this._DynamicSOD1;
			}
			set
			{
				this._DynamicSOD1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleHierarchy", Storage="_RoleHierarchy", ThisKey="Id", OtherKey="ChildRole_Id")]
		public EntitySet<RoleHierarchy> RoleHierarchy
		{
			get
			{
				return this._RoleHierarchy;
			}
			set
			{
				this._RoleHierarchy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleHierarchy1", Storage="_RoleHierarchy1", ThisKey="Id", OtherKey="ParentRole_Id")]
		public EntitySet<RoleHierarchy> RoleHierarchy1
		{
			get
			{
				return this._RoleHierarchy1;
			}
			set
			{
				this._RoleHierarchy1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_RolePermission", ThisKey="Id", OtherKey="Role_Id")]
		public EntitySet<RolePermission> RolePermission
		{
			get
			{
				return this._RolePermission;
			}
			set
			{
				this._RolePermission.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_StaticSOD", Storage="_StaticSOD", ThisKey="Id", OtherKey="ExclusiveRole_Id")]
		public EntitySet<StaticSOD> StaticSOD
		{
			get
			{
				return this._StaticSOD;
			}
			set
			{
				this._StaticSOD.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_StaticSOD1", Storage="_StaticSOD1", ThisKey="Id", OtherKey="Role_Id")]
		public EntitySet<StaticSOD> StaticSOD1
		{
			get
			{
				return this._StaticSOD1;
			}
			set
			{
				this._StaticSOD1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Role", Storage="_Policy", ThisKey="Policy_Id", OtherKey="Id", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.Role.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.Role.Add(this);
						this._Policy_Id = value.Id;
					}
					else
					{
						this._Policy_Id = default(int);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActiveRole(ActiveRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_ActiveRole(ActiveRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_AuthUserRole(AuthUserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_AuthUserRole(AuthUserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_DynamicSOD(DynamicSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_DynamicSOD(DynamicSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_DynamicSOD1(DynamicSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_DynamicSOD1(DynamicSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
		
		private void attach_RoleHierarchy(RoleHierarchy entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleHierarchy(RoleHierarchy entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RoleHierarchy1(RoleHierarchy entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_RoleHierarchy1(RoleHierarchy entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
		
		private void attach_RolePermission(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolePermission(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_StaticSOD(StaticSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_StaticSOD(StaticSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_StaticSOD1(StaticSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_StaticSOD1(StaticSOD entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleHierarchy")]
	public partial class RoleHierarchy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParentRole_Id;
		
		private int _ChildRole_Id;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Role> _Role1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentRole_IdChanging(int value);
    partial void OnParentRole_IdChanged();
    partial void OnChildRole_IdChanging(int value);
    partial void OnChildRole_IdChanged();
    #endregion
		
		public RoleHierarchy()
		{
			this._Role = default(EntityRef<Role>);
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentRole_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ParentRole_Id
		{
			get
			{
				return this._ParentRole_Id;
			}
			set
			{
				if ((this._ParentRole_Id != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRole_IdChanging(value);
					this.SendPropertyChanging();
					this._ParentRole_Id = value;
					this.SendPropertyChanged("ParentRole_Id");
					this.OnParentRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildRole_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChildRole_Id
		{
			get
			{
				return this._ChildRole_Id;
			}
			set
			{
				if ((this._ChildRole_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildRole_IdChanging(value);
					this.SendPropertyChanging();
					this._ChildRole_Id = value;
					this.SendPropertyChanged("ChildRole_Id");
					this.OnChildRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleHierarchy", Storage="_Role", ThisKey="ChildRole_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleHierarchy.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleHierarchy.Add(this);
						this._ChildRole_Id = value.Id;
					}
					else
					{
						this._ChildRole_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleHierarchy1", Storage="_Role1", ThisKey="ParentRole_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.RoleHierarchy1.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.RoleHierarchy1.Add(this);
						this._ParentRole_Id = value.Id;
					}
					else
					{
						this._ParentRole_Id = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePermission")]
	public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_Id;
		
		private int _Permission_Id;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Role> _Role;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    partial void OnPermission_IdChanging(int value);
    partial void OnPermission_IdChanged();
    #endregion
		
		public RolePermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Permission_Id
		{
			get
			{
				return this._Permission_Id;
			}
			set
			{
				if ((this._Permission_Id != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermission_IdChanging(value);
					this.SendPropertyChanging();
					this._Permission_Id = value;
					this.SendPropertyChanged("Permission_Id");
					this.OnPermission_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_Permission", ThisKey="Permission_Id", OtherKey="Id", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.RolePermission.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.RolePermission.Add(this);
						this._Permission_Id = value.Id;
					}
					else
					{
						this._Permission_Id = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_Role", ThisKey="Role_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolePermission.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolePermission.Add(this);
						this._Role_Id = value.Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _User_Id;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private EntitySet<ActiveRole> _ActiveRole;
		
		private EntityRef<User> _User;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Session()
		{
			this._ActiveRole = new EntitySet<ActiveRole>(new Action<ActiveRole>(this.attach_ActiveRole), new Action<ActiveRole>(this.detach_ActiveRole));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", DbType="Int NOT NULL")]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_ActiveRole", Storage="_ActiveRole", ThisKey="Id", OtherKey="Session_Id")]
		public EntitySet<ActiveRole> ActiveRole
		{
			get
			{
				return this._ActiveRole;
			}
			set
			{
				this._ActiveRole.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Session", Storage="_User", ThisKey="User_Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Session.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Session.Add(this);
						this._User_Id = value.Id;
					}
					else
					{
						this._User_Id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActiveRole(ActiveRole entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_ActiveRole(ActiveRole entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaticSOD")]
	public partial class StaticSOD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_Id;
		
		private int _ExclusiveRole_Id;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Role> _Role1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    partial void OnExclusiveRole_IdChanging(int value);
    partial void OnExclusiveRole_IdChanged();
    #endregion
		
		public StaticSOD()
		{
			this._Role = default(EntityRef<Role>);
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExclusiveRole_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExclusiveRole_Id
		{
			get
			{
				return this._ExclusiveRole_Id;
			}
			set
			{
				if ((this._ExclusiveRole_Id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExclusiveRole_IdChanging(value);
					this.SendPropertyChanging();
					this._ExclusiveRole_Id = value;
					this.SendPropertyChanged("ExclusiveRole_Id");
					this.OnExclusiveRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_StaticSOD", Storage="_Role", ThisKey="ExclusiveRole_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.StaticSOD.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.StaticSOD.Add(this);
						this._ExclusiveRole_Id = value.Id;
					}
					else
					{
						this._ExclusiveRole_Id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_StaticSOD1", Storage="_Role1", ThisKey="Role_Id", OtherKey="Id", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.StaticSOD1.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.StaticSOD1.Add(this);
						this._Role_Id = value.Id;
					}
					else
					{
						this._Role_Id = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
